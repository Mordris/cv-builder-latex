// src/components/sections/__tests__/WorkExperienceEditor.spec.js
import { describe, it, expect, vi } from "vitest";
import { render, screen } from "@testing-library/vue";
import userEvent from "@testing-library/user-event";
import WorkExperienceEditor from "../WorkExperienceEditor.vue";

const mockGenerateUUID = vi.fn(() => `mock-uuid-${Math.random()}`);

describe("WorkExperienceEditor.vue", () => {
  const initialProps = {
    modelValue: {
      id: "sec-work",
      type: "workExperience",
      title: "Work History",
      items: [
        {
          id: "work-1",
          jobTitle: "Old Job",
          company: "Old Inc.",
          date: "2000",
          description: "Did things",
        },
      ],
    },
    isFirst: false,
    isLast: false,
  };

  const renderComponent = (props = initialProps) => {
    return render(WorkExperienceEditor, {
      props,
      global: {
        provide: { generateUUID: mockGenerateUUID },
        stubs: {
          BaseSectionWrapper: {
            template: '<div><slot name="header"/><slot name="content"/></div>',
          },
        },
      },
    });
  };

  it("renders initial work item fields", () => {
    renderComponent();
    expect(screen.getByText("Work History")).toBeInTheDocument();
    expect(screen.getByLabelText("Job Title")).toHaveValue("Old Job");
    expect(screen.getByLabelText("Company")).toHaveValue("Old Inc.");
    expect(screen.getByLabelText("Date Range")).toHaveValue("2000");
    expect(screen.getByLabelText("Description / Achievements")).toHaveValue(
      "Did things"
    );
  });

  it("updates an item field and emits update:modelValue", async () => {
    const user = userEvent.setup();
    const { emitted } = renderComponent();
    const companyInput = screen.getByLabelText("Company");

    await user.clear(companyInput);
    await user.type(companyInput, "New Inc.");

    expect(emitted()).toHaveProperty("update:modelValue");
    const lastEmittedValue = emitted()["update:modelValue"].pop()[0];
    expect(lastEmittedValue.items[0].company).toBe("New Inc.");
    expect(lastEmittedValue.items[0].jobTitle).toBe("Old Job"); // Ensure other fields are preserved
  });

  it('adds a new item when "Add Experience" is clicked', async () => {
    const user = userEvent.setup();
    const { emitted } = renderComponent();
    const addButton = screen.getByRole("button", { name: /add experience/i });

    await user.click(addButton);

    expect(emitted()).toHaveProperty("update:modelValue");
    const lastEmittedValue = emitted()["update:modelValue"].pop()[0];
    expect(lastEmittedValue.items).toHaveLength(2);
    expect(lastEmittedValue.items[1]).toEqual({
      id: expect.any(String), // ID generated by mock
      jobTitle: "",
      company: "",
      date: "",
      description: "",
    });

    // Check DOM - should have 2 sets of inputs now
    expect(screen.getAllByLabelText("Job Title")).toHaveLength(2);
  });

  it("removes an item when remove button is clicked (if more than one item)", async () => {
    const user = userEvent.setup();
    const propsWithTwoItems = {
      ...initialProps,
      modelValue: {
        ...initialProps.modelValue,
        items: [
          {
            id: "work-1",
            jobTitle: "Job 1",
            company: "Comp 1",
            date: "D1",
            description: "Desc 1",
          },
          {
            id: "work-2",
            jobTitle: "Job 2",
            company: "Comp 2",
            date: "D2",
            description: "Desc 2",
          },
        ],
      },
    };
    const { emitted } = renderComponent(propsWithTwoItems);

    // Find remove button for the first item
    const firstItemRemoveButton = screen
      .getByDisplayValue("Job 1")
      .closest(".relative") // Find the parent wrapper div
      .querySelector('button[title="Remove Experience Entry"]');
    expect(firstItemRemoveButton).toBeInTheDocument();

    await user.click(firstItemRemoveButton);

    expect(emitted()).toHaveProperty("update:modelValue");
    const lastEmittedValue = emitted()["update:modelValue"].pop()[0];
    expect(lastEmittedValue.items).toHaveLength(1);
    expect(lastEmittedValue.items[0].jobTitle).toBe("Job 2"); // Second item should remain

    // Check DOM
    expect(screen.queryByDisplayValue("Job 1")).not.toBeInTheDocument();
    expect(screen.getByDisplayValue("Job 2")).toBeInTheDocument();
  });

  it("does NOT remove the last item", async () => {
    // Start with only one item
    renderComponent(initialProps);

    // Find the container for the single item
    const itemContainer = screen
      .getByDisplayValue("Old Job")
      .closest(".relative");
    expect(itemContainer).toBeInTheDocument();

    // Assert that the remove button does NOT exist within that container
    // because of the v-if="localSectionData.items.length > 1"
    const removeButton = itemContainer.querySelector(
      'button[title="Remove Experience Entry"]'
    );
    expect(removeButton).not.toBeInTheDocument();

    // Check that the item itself still exists
    expect(screen.getByDisplayValue("Old Job")).toBeInTheDocument();
    expect(screen.getAllByLabelText("Job Title")).toHaveLength(1);
  });
});
